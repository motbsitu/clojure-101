<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1447350989229">{:repl-history {:ide [], :local [&quot;(function-argument-example 2)&quot; &quot;(div 5 2)&quot; &quot;(let-binding-example)&quot; &quot;\\s&quot; &quot;\\ &quot; &quot;\\space &quot; &quot;\\asend-off&quot; &quot;\\tab&quot; &quot;(re-find #\&quot;cat\&quot; )&quot; &quot;(re-find #\&quot;cat\&quot; \&quot;a cat and a dog\&quot;)&quot; &quot;(def a 42)&quot; &quot;(a {'a 24, 'b 42})&quot; &quot;(. \&quot;asdf\&quot; toUpperCase)&quot; &quot;(eval (list + 1 2 3))&quot; &quot;(try 1 (catch Exception e) (finally 4))&quot; &quot;(pr '(+ 1 2 3))&quot; &quot;(pr-str '(+ 1 2 3))&quot; &quot;(function-argument-example 4)&quot; &quot;(quot 5 2)&quot; &quot;(rem 5 2)&quot; &quot;(double (/ 5 2))&quot; &quot;(let-binding-example 4)&quot; &quot;(+ Long/MAX_VALUE Long/MAX_VALUE)&quot; &quot;(unchecked-add Long/MAX_VALUE Long/MAX_VALUE)&quot; &quot;(re-find #\&quot;ca+t\&quot; \&quot;a caaaat and a dog\&quot;)&quot; &quot;a&quot; &quot;('a {'a 24, 'b 42})&quot; &quot;:im-a-name&quot; &quot;(:a {:a 24, :b 42})&quot; &quot;(read-string \&quot;(+ 1 2 3)\&quot;)&quot; &quot;(eval '(+ 1 2 3))&quot; &quot;(eval (read-string \&quot;(+ 1 2 3)\&quot;))&quot;], :remote []}}</component>
</project>